{"version":3,"sources":["serviceWorker.js","redux/reducer/authReducer.js","redux/reducer/categoryReducer.js","redux/reducer/incidentReducer.js","redux/reducer/index.js","redux/constants.js","redux/actionCreators/catalogAction.js","redux/actionCreators/incidentAction.js","redux/saga.js","redux/actionCreators/authAction.js","redux/store.js","redux/actionCreators/queryApiAction.js","redux/actionCreators/departmentAction.js","component/IncidentInWork/IncidentInWork.tsx","component/IncidentStatus/IncidentStatus.tsx","component/IncidentWorkButton/IncidentWorkButton.jsx","component/IncidentWindow/IncidentWindow.jsx","component/Sidebar/Sidebar.tsx","component/Incident/Incident.jsx","page/MainPage.jsx","component/ListEdit/ListEdit.tsx","component/CatalogSetting/CatalogSetting.jsx","component/DepartmentSetting/DepartmentSetting.jsx","page/SettingPage.jsx","component/CreateIncidentModalSelect/CreateIncidentModalSelect.jsx","component/CreateIncidentModal/CreateIncidentModal.jsx","component/Header/Header.jsx","page/MyIncidentPage.jsx","App.jsx","index.js","component/Header/styles.module.css","component/Sidebar/styles.module.css","component/IncidentWindow/styles.module.css","component/ListEdit/styles.module.css"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","initialState","isRequest","isLoading","list","department","myList","current","incident","isChange","isUpdate","CombineReducers","combineReducers","auth","action","type","user","data","catalog","incidents","catalogPost","route","method","id","incidentFetching","incidentRequestSuccessed","myIncidentRequestSuccessed","watchFetch","queryApiAsync","fetchAsync","fetchAsyncCatalog","fetchAsyncIncident","takeLatest","takeEvery","successedAction","call","axios","response","put","message","ip","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","queryApi","departmentRequestSuccessed","memo","startWork","nameResponsible","locale","fromNow","myincident","status","useState","statusTitle","Button","variant","disabled","size","DropdownButton","title","Dropdown","Item","onClick","xs","dispatch","useDispatch","number","useSelector","useEffect","Container","Card","Header","className","styles","header","responsibleUser","name1","name2","charAt","name3","undefined","statusId","Body","Title","category","name","property","option","Text","initiatorUser","email","phone1","text","date","Date","dateNow","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","responsible","currentResponsible","Number","Footer","createdAt","updatedAt","badge","activeId","blogTitle","setBlogTitle","newBlogTitle","Badge","length","key","jsxListItem","setJsxListItem","jsxItem","map","item","itemText","ListGroup","active","format","block","shallowEqual","chooseIncidentId","setChooseIncidentId","newCurrentIncident","find","incidentChoose","sidebarList","setSidebarList","Row","Col","setNumber","actionCreator","departmentId","categoryId","inputOff","setState","Form","onSubmit","event","preventDefault","Group","Label","Control","placeholder","value","onChange","target","icon","faTrash","chooseCategoryId","setChooseCategoryId","currentCategory","setCurrentCategory","properties","options","props","setDepartmentId","listCatalog","setListCatalog","filter","setActiveId","jsxContent","setJsxContent","inputed","controlId","as","handleClose","showModal","dateCreate","level","positionId","userNumber","phone2","propertyId","optionId","setIncident","currentIdCategory","setCurrentIdCategory","currentIdProperty","setCurrentIdProperty","currentIdOption","setCurrentIdOption","newCurrentCategory","listSelect","setCurrent","Modal","aria-labelledby","centered","show","onHide","closeButton","rows","access","setAccess","setShowModal","fullName","setFullName","Navbar","collapseOnSelect","expand","bg","Brand","Toggle","aria-controls","Collapse","Nav","nav","to","activeClassName","nav__button","CreateIncidentModal","Link","href","Image","src","roundedCircle","nav__item","faCog","ipGlobal","exact","path","component","MainPage","SettingPage","MyIncidentPage","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.773c9f90.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { AUTH_REQUEST_SENDD, AUTH_REQUEST_SUCCESSED } from '../constants';\r\n\r\nconst initialState = {\r\n  isRequest: false,\r\n  isLoading: false,\r\n};\r\n\r\nexport const authReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case AUTH_REQUEST_SENDD:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isRequest: true,\r\n      };\r\n    case AUTH_REQUEST_SUCCESSED:\r\n      const {\r\n        data: { user },\r\n      } = action;\r\n      return {\r\n        ...state,\r\n        user,\r\n        isLoading: true,\r\n        isRequest: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { CATALOG_REQUEST_SENDD, CATALOG_REQUEST_SUCCESSED } from '../constants';\r\nimport { DEPARTMENT_REQUEST_SUCCESSED } from '../constants';\r\nconst initialState = {\r\n  list: [],\r\n  isRequest: false,\r\n  isLoading: false,\r\n  department: null,\r\n};\r\n\r\nexport const categoryReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CATALOG_REQUEST_SENDD:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isRequest: true,\r\n      };\r\n    case CATALOG_REQUEST_SUCCESSED:\r\n      return {\r\n        ...state,\r\n        list: action.data,\r\n        isLoading: true,\r\n        isRequest: false,\r\n      };\r\n    case DEPARTMENT_REQUEST_SUCCESSED:\r\n      return {\r\n        ...state,\r\n        department: action.data,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  INCIDENT_REQUEST_SENDD,\r\n  INCIDENT_REQUEST_SUCCESSED,\r\n  MY_INCIDENT_REQUEST_SUCCESSED,\r\n  INCIDENT_CREATE,\r\n  INCIDENT_CHOOSE,\r\n} from '../constants';\r\n\r\nconst initialState = {\r\n  list: [],\r\n  myList: [],\r\n  current: {\r\n    incident: null,\r\n    isChange: false,\r\n  },\r\n  isRequest: false,\r\n  isLoading: false,\r\n  isUpdate: true,\r\n};\r\n\r\nexport const incidentReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case INCIDENT_REQUEST_SENDD:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isRequest: true,\r\n      };\r\n    case INCIDENT_REQUEST_SUCCESSED:\r\n      return {\r\n        ...state,\r\n        list: action.data,\r\n        isLoading: true,\r\n        isUpdate: false,\r\n        isRequest: false,\r\n      };\r\n    case MY_INCIDENT_REQUEST_SUCCESSED:\r\n      return {\r\n        ...state,\r\n        myList: action.data,\r\n        isLoading: true,\r\n        isRequest: false,\r\n        isUpdate: false,\r\n      };\r\n    case INCIDENT_CREATE:\r\n      return {\r\n        ...state,\r\n        isUpdate: true,\r\n      };\r\n    case INCIDENT_CHOOSE:\r\n      return {\r\n        ...state,\r\n        current: {\r\n          ...state.current,\r\n          incident: action.incident,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { authReducer } from './authReducer';\r\nimport { categoryReducer } from './categoryReducer';\r\nimport { incidentReducer } from './incidentReducer';\r\n\r\nexport const CombineReducers = combineReducers({\r\n  auth: authReducer,\r\n  catalog: categoryReducer,\r\n  incidents: incidentReducer,\r\n});\r\n","/** Константы для авторизации */\r\nexport const AUTH_FETCHING = 'AUTH_FETCHING';\r\nexport const AUTH_REQUEST_SENDD = 'AUTH_REQUEST_SENDD';\r\nexport const AUTH_REQUEST_SUCCESSED = 'AUTH_REQUEST_SUCCESSED';\r\n\r\n/** Константы для категории*/\r\nexport const CATALOG_FETCHING = 'CATALOG_FETCHING';\r\nexport const CATALOG_REQUEST_SENDD = 'CATALOG_REQUEST_SENDD';\r\nexport const CATALOG_REQUEST_SUCCESSED = 'CATALOG_REQUEST_SUCCESSED';\r\nexport const CATALOG_POST = 'CATALOG_POST';\r\n\r\n/** Константы для параметров*/\r\nexport const PROPERTY_POST = 'PROPERTY_POST';\r\n\r\n/** Константы для опций*/\r\nexport const OPTION_POST = 'OPTION_POST';\r\n\r\n/** Константы для инцидентов */\r\nexport const INCIDENT_FETCHING = 'INCIDENT_FETCHING';\r\nexport const INCIDENT_REQUEST_SENDD = 'INCIDENT_REQUEST_SENDD';\r\nexport const INCIDENT_REQUEST_SUCCESSED = 'INCIDENT_REQUEST_SUCCESSED';\r\nexport const INCIDENT_CREATE = 'INCIDENT_CREATE';\r\nexport const INCIDENT_CHOOSE = 'INCIDENT_CHOOSE';\r\nexport const MY_INCIDENT_REQUEST_SUCCESSED = 'MY_INCIDENT_REQUEST_SUCCESSED';\r\n\r\n/** Константы для отделов */\r\nexport const DEPARTMENT_FETCHING = 'DEPARTMENT_FETCHING';\r\nexport const DEPARTMENT_REQUEST_SENDD = 'DEPARTMENT_REQUEST_SENDD';\r\nexport const DEPARTMENT_REQUEST_SUCCESSED = 'DEPARTMENT_REQUEST_SUCCESSED';\r\n\r\n/** Запрос REST API */\r\nexport const QUERY_API = 'QUERY_API';\r\n","import {\r\n  CATALOG_FETCHING,\r\n  CATALOG_REQUEST_SENDD,\r\n  CATALOG_REQUEST_SUCCESSED,\r\n  CATALOG_POST,\r\n} from '../constants';\r\n\r\nexport const categoryFetching = () => ({\r\n  type: CATALOG_FETCHING,\r\n});\r\nexport const categoryRequestSendd = () => ({\r\n  type: CATALOG_REQUEST_SENDD,\r\n});\r\nexport const categoryRequestSuccessed = (data) => ({\r\n  type: CATALOG_REQUEST_SUCCESSED,\r\n  data,\r\n});\r\nexport const catalogPost = (route, method, data, id) => ({\r\n  type: CATALOG_POST,\r\n  method,\r\n  route,\r\n  data,\r\n  id,\r\n});\r\n","import {\r\n  INCIDENT_FETCHING,\r\n  INCIDENT_REQUEST_SENDD,\r\n  INCIDENT_REQUEST_SUCCESSED,\r\n  MY_INCIDENT_REQUEST_SUCCESSED,\r\n  INCIDENT_CHOOSE,\r\n  INCIDENT_CREATE,\r\n} from '../constants';\r\n\r\nexport const incidentFetching = (\r\n  method = 'get',\r\n  data,\r\n  id,\r\n  route = 'incidents',\r\n) => ({\r\n  type: INCIDENT_FETCHING,\r\n  route,\r\n  method,\r\n  data,\r\n  id,\r\n});\r\nexport const incidentRequestSendd = () => ({\r\n  type: INCIDENT_REQUEST_SENDD,\r\n});\r\nexport const incidentRequestSuccessed = (data) => ({\r\n  type: INCIDENT_REQUEST_SUCCESSED,\r\n  data,\r\n});\r\nexport const myIncidentRequestSuccessed = (data) => ({\r\n  type: MY_INCIDENT_REQUEST_SUCCESSED,\r\n  data,\r\n});\r\nexport const incidentCreate = () => ({ type: INCIDENT_CREATE });\r\nexport const incidentChoose = (incident) => ({\r\n  type: INCIDENT_CHOOSE,\r\n  incident,\r\n});\r\n","import { put, call, takeLatest, takeEvery } from 'redux-saga/effects';\r\nimport * as axios from 'axios';\r\nimport {\r\n  AUTH_FETCHING,\r\n  CATALOG_FETCHING,\r\n  CATALOG_POST,\r\n  INCIDENT_FETCHING,\r\n  QUERY_API,\r\n} from './constants';\r\nimport {\r\n  authRequestSendd,\r\n  authRequestSuccessed,\r\n} from './actionCreators/authAction';\r\nimport {\r\n  categoryFetching,\r\n  categoryRequestSendd,\r\n  categoryRequestSuccessed,\r\n} from './actionCreators/catalogAction';\r\nimport {\r\n  incidentRequestSendd,\r\n  incidentRequestSuccessed,\r\n} from './actionCreators/incidentAction';\r\n\r\nexport function* watchFetch() {\r\n  yield takeLatest(AUTH_FETCHING, fetchAsync);\r\n  yield takeLatest(CATALOG_FETCHING, fetchAsyncCatalog);\r\n  yield takeEvery(CATALOG_POST, catalogPost);\r\n  yield takeEvery(QUERY_API, queryApiAsync);\r\n  yield takeEvery(INCIDENT_FETCHING, fetchAsyncIncident);\r\n}\r\n\r\nfunction* queryApiAsync({ route, successedAction, method, data, id }) {\r\n  try {\r\n    // yield put(authRequestSendd());\r\n    let response;\r\n    switch (method) {\r\n      case 'post':\r\n        response = yield call(() =>\r\n          axios.post(`http://localhost:8080/api/${route}`, data),\r\n        );\r\n        break;\r\n      case 'delete':\r\n        response = yield call(() =>\r\n          axios.delete(`http://localhost:8080/api/${route}/${id}`, data),\r\n        );\r\n        break;\r\n\r\n      default:\r\n        response = yield call(() =>\r\n          axios.get(`http://localhost:8080/api/${route}/${id || ''}`, data),\r\n        );\r\n        break;\r\n    }\r\n    yield put(successedAction(response.data));\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n}\r\n\r\nfunction* fetchAsync({ ip }) {\r\n  try {\r\n    yield put(authRequestSendd());\r\n    const response = yield call(() =>\r\n      axios.get(`http://localhost:8080/api/auth/?ip=${ip}`),\r\n    );\r\n    yield put(authRequestSuccessed(response.data[0]));\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n}\r\n\r\nfunction* fetchAsyncCatalog() {\r\n  try {\r\n    yield put(categoryRequestSendd());\r\n    const response = yield call(() =>\r\n      axios.get(`http://localhost:8080/api/categories`),\r\n    );\r\n    yield put(categoryRequestSuccessed(response.data));\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n}\r\nfunction* fetchAsyncIncident({ route, method, data, id }) {\r\n  try {\r\n    yield put(incidentRequestSendd());\r\n    switch (method) {\r\n      case 'post':\r\n        yield call(() =>\r\n          axios.post(`http://localhost:8080/api/${route}`, data),\r\n        );\r\n        break;\r\n      case 'delete':\r\n        yield call(() =>\r\n          axios.delete(`http://localhost:8080/api/${route}/${id}`, data),\r\n        );\r\n        break;\r\n      case 'put':\r\n        yield call(() =>\r\n          axios.put(`http://localhost:8080/api/${route}/${id}`, data),\r\n        );\r\n        break;\r\n      case 'get':\r\n        const response = yield call(() =>\r\n          axios.get(`http://localhost:8080/api/incidents`),\r\n        );\r\n        yield put(incidentRequestSuccessed(response.data));\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n}\r\nfunction* catalogPost({ route, method, data, id }) {\r\n  try {\r\n    yield put(authRequestSendd());\r\n    switch (method) {\r\n      case 'post':\r\n        yield call(() =>\r\n          axios.post(`http://localhost:8080/api/${route}`, data),\r\n        );\r\n        break;\r\n      case 'delete':\r\n        yield call(() =>\r\n          axios.delete(`http://localhost:8080/api/${route}/${id}`, data),\r\n        );\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    yield put(categoryFetching());\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n}\r\n","import {\r\n  AUTH_FETCHING,\r\n  AUTH_REQUEST_SENDD,\r\n  AUTH_REQUEST_SUCCESSED,\r\n} from '../constants';\r\n\r\nexport const authFetching = (ip) => ({ type: AUTH_FETCHING, ip });\r\nexport const authRequestSendd = () => ({ type: AUTH_REQUEST_SENDD });\r\nexport const authRequestSuccessed = (data) => ({\r\n  type: AUTH_REQUEST_SUCCESSED,\r\n  data,\r\n});\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport { CombineReducers } from './reducer';\r\nimport { watchFetch } from './saga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(CombineReducers, applyMiddleware(sagaMiddleware));\r\n\r\nsagaMiddleware.run(watchFetch);\r\n\r\nexport default store;\r\n","import { QUERY_API } from '../constants';\r\n\r\nexport const queryApi = (route, successedAction, method, data, id) => ({\r\n  type: QUERY_API,\r\n  route,\r\n  successedAction,\r\n  data,\r\n  id,\r\n  method,\r\n});\r\n","import {\r\n  DEPARTMENT_FETCHING,\r\n  DEPARTMENT_REQUEST_SENDD,\r\n  DEPARTMENT_REQUEST_SUCCESSED,\r\n} from '../constants';\r\n\r\nexport const departmentFetching = () => ({\r\n  type: DEPARTMENT_FETCHING,\r\n});\r\nexport const departmentRequestSendd = () => ({\r\n  type: DEPARTMENT_REQUEST_SENDD,\r\n});\r\nexport const departmentRequestSuccessed = (data) => ({\r\n  type: DEPARTMENT_REQUEST_SUCCESSED,\r\n  data,\r\n});\r\n","import React, { memo } from 'react';\r\nimport Moment from 'react-moment';\r\nimport 'moment/locale/ru';\r\n\r\nimport { IIncidentInWork } from './interface';\r\n\r\nconst IncidentInWork: React.FC<IIncidentInWork> = ({\r\n  startWork,\r\n  nameResponsible,\r\n}) => {\r\n  return (\r\n    <>\r\n      <small>\r\n        {`${nameResponsible} принял(а) в работу `}\r\n        <Moment locale=\"ru\" fromNow>\r\n          {startWork}\r\n        </Moment>\r\n      </small>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(IncidentInWork);\r\n","import React, { memo, useState } from 'react';\r\nimport { IIncidentStatus } from './interface';\r\n//Bootstrap\r\nimport { DropdownButton, Dropdown, Button } from 'react-bootstrap';\r\n\r\nconst IncidentStatus: React.FC<IIncidentStatus> = ({ myincident, status }) => {\r\n  const [statusTitle] = useState('В работе');\r\n  if (status)\r\n    return (\r\n      <>\r\n        {!myincident ? (\r\n          <DropdownButton\r\n            id=\"dropdown-item-button\"\r\n            title={statusTitle}\r\n            variant={'info'}\r\n            size=\"sm\"\r\n          >\r\n            <Dropdown.Item>В работе</Dropdown.Item>\r\n            <Dropdown.Item>В работе (подрядчик)</Dropdown.Item>\r\n            <Dropdown.Item>Готово</Dropdown.Item>\r\n          </DropdownButton>\r\n        ) : (\r\n          <Button variant={'info'} disabled size=\"sm\">\r\n            {statusTitle}\r\n          </Button>\r\n        )}\r\n      </>\r\n    );\r\n  else return <></>;\r\n};\r\n\r\nexport default memo(IncidentStatus);\r\n","import React, { memo } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nexport default memo(function IncidentWorkButton({ user, onClick }) {\r\n  return (\r\n    <>\r\n      <hr />\r\n      {!user ? (\r\n        <Button variant=\"outline-success\" xs=\"sm\" onClick={onClick}>\r\n          Взять в работу\r\n        </Button>\r\n      ) : (\r\n        <Button>Сохранить</Button>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n","import React, { memo, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Moment from 'react-moment';\r\nimport styles from './styles.module.css';\r\nimport 'moment/locale/ru';\r\n\r\n//ActionCreator\r\nimport { incidentFetching } from '../../redux/actionCreators/incidentAction';\r\n\r\nimport IncidentInWork from '../IncidentInWork/IncidentInWork';\r\nimport IncidentStatus from '../IncidentStatus/IncidentStatus';\r\nimport IncidentWorkButton from '../IncidentWorkButton/IncidentWorkButton';\r\n\r\nimport { Container, Card } from 'react-bootstrap';\r\n\r\nconst IncidentWindow = ({ incident, myincident }) => {\r\n  //State изменений в инциденте\r\n  console.log(incident);\r\n\r\n  const dispatch = useDispatch();\r\n  const { number } = useSelector((state) => state.auth.user);\r\n  const onClick = () => {\r\n    const date = new Date();\r\n    const dateNow = `${date.getFullYear()}-${\r\n      date.getMonth() + 1\r\n    }-${date.getDate()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\r\n    const responsible = {\r\n      currentResponsible: number,\r\n      startWork: dateNow,\r\n      statusId: Number(1),\r\n    };\r\n    dispatch(incidentFetching('put', responsible, incident.id, 'incidents'));\r\n  };\r\n  useEffect(() => {}, [incident]);\r\n  if (!!incident) {\r\n    return (\r\n      <Container>\r\n        <Card>\r\n          <Card.Header className={styles.header}>\r\n            <div>\r\n              Инцидент №{incident.id}{' '}\r\n              {incident.responsibleUser ? (\r\n                <>\r\n                  {'| '}\r\n                  <IncidentInWork\r\n                    startWork={incident.startWork}\r\n                    nameResponsible={`\r\n                ${\r\n                  incident.responsibleUser.name1\r\n                } ${incident.responsibleUser.name2.charAt(\r\n                      0,\r\n                    )}.${incident.responsibleUser.name3.charAt(0)}.`}\r\n                  />\r\n                </>\r\n              ) : null}\r\n            </div>\r\n            <IncidentStatus\r\n              myincident={myincident | undefined}\r\n              status={incident.statusId}\r\n            />\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Card.Title>\r\n              {!!incident.category ? incident.category.name : null}\r\n\r\n              {!!incident.property ? ` / ${incident.property.name}` : null}\r\n\r\n              {!!incident.option ? ` /  ${incident.option.name}` : null}\r\n            </Card.Title>\r\n            <Card.Text></Card.Text>\r\n            <Card.Text>\r\n              Инициатор:{' '}\r\n              {`${incident.initiatorUser.name1 || ''} ${\r\n                incident.initiatorUser.name2 || ''\r\n              } ${incident.initiatorUser.name3 || ''}`}\r\n            </Card.Text>\r\n            <Card.Text>\r\n              {!!incident.initiatorUser\r\n                ? `Email: ${incident.initiatorUser.email} `\r\n                : null}\r\n            </Card.Text>\r\n            <Card.Text>\r\n              {!!incident.initiatorUser\r\n                ? `Тел.: ${incident.initiatorUser.phone1} `\r\n                : null}\r\n            </Card.Text>\r\n            {incident.text ? <hr /> : null}\r\n            <Card.Text>{incident.text}</Card.Text>\r\n            {!myincident ? (\r\n              <IncidentWorkButton\r\n                user={incident.responsibleUser}\r\n                onClick={onClick}\r\n              />\r\n            ) : null}\r\n          </Card.Body>\r\n          <Card.Footer className=\"text-right\">\r\n            <small>\r\n              <i>\r\n                <b>Создан:</b>{' '}\r\n                <Moment locale=\"ru\" fromNow>\r\n                  {incident.createdAt}\r\n                </Moment>\r\n              </i>\r\n              {' | '}\r\n              <i>\r\n                <b>Последнее обновление:</b>{' '}\r\n                <Moment locale=\"ru\" fromNow>\r\n                  {incident.updatedAt}\r\n                </Moment>\r\n              </i>\r\n            </small>\r\n          </Card.Footer>\r\n        </Card>\r\n      </Container>\r\n    );\r\n  } else {\r\n    return <h2>Выберите инцидент</h2>;\r\n  }\r\n};\r\n\r\nexport default memo(IncidentWindow);\r\n","import React, { memo, useState, useEffect } from 'react';\r\nimport styles from './styles.module.css';\r\nimport { Container, Badge, ListGroup } from 'react-bootstrap';\r\nimport Moment from 'react-moment';\r\n\r\n//Interface TypeScript for function Sidebar\r\nimport { ISidebar } from './interface';\r\n\r\nconst Sidebar: React.FC<ISidebar> = ({\r\n  title,\r\n  list,\r\n  isLoading,\r\n  badge,\r\n  onClick,\r\n  activeId,\r\n}) => {\r\n  const [blogTitle, setBlogTitle] = useState<JSX.Element | null>(null);\r\n  useEffect(() => {\r\n    if (title) {\r\n      const newBlogTitle = (\r\n        <h3>\r\n          {title}\r\n          {badge ? (\r\n            <Badge variant=\"primary\" className=\"ml-3\">\r\n              {list.length}\r\n            </Badge>\r\n          ) : null}\r\n        </h3>\r\n      );\r\n      setBlogTitle(newBlogTitle);\r\n    }\r\n  }, [title, list, badge]);\r\n\r\n  const [jsxListItem, setJsxListItem] = useState([\r\n    <p key={0}>Загрузка данных</p>,\r\n  ]);\r\n  useEffect(() => {\r\n    const jsxItem = list.map((item) => {\r\n      let { id, name, createdAt } = item;\r\n      let itemText: string;\r\n      if (createdAt) {\r\n        itemText = `№${id} - ${name ? name : 'N/A'} `;\r\n      } else {\r\n        itemText = `${name ? name : 'N/A'} `;\r\n      }\r\n      return (\r\n        <ListGroup.Item\r\n          key={id}\r\n          //@ts-ignore\r\n          onClick={onClick ? () => onClick(id) : null}\r\n          className={`${styles.item} ${activeId === id ? styles.active : null}`}\r\n        >\r\n          {itemText}\r\n          {createdAt ? (\r\n            <Moment locale=\"ru\" format=\"DD.MM\">\r\n              {createdAt}\r\n            </Moment>\r\n          ) : null}\r\n        </ListGroup.Item>\r\n      );\r\n    });\r\n\r\n    setJsxListItem(jsxItem);\r\n  }, [list, activeId, onClick]);\r\n\r\n  return (\r\n    <Container>\r\n      {blogTitle}\r\n      <div className={styles.block}>\r\n        <ListGroup variant=\"flush\">{jsxListItem}</ListGroup>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default memo(Sidebar);\r\n","import React, { memo, useState, useEffect } from 'react';\r\nimport IncidentWindow from '../IncidentWindow/IncidentWindow';\r\nimport Sidebar from '../Sidebar/Sidebar';\r\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\r\nimport { incidentChoose } from '../../redux/actionCreators/incidentAction';\r\n\r\n/**Bootstrap components */\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\n\r\nconst Incident = ({ list, isLoading, myincident }) => {\r\n  const dispatch = useDispatch();\r\n  const { incident } = useSelector(\r\n    (state) => state.incidents.current,\r\n    shallowEqual,\r\n  );\r\n  const [chooseIncidentId, setChooseIncidentId] = useState();\r\n\r\n  //currentIncident хранит текущий инцидент, setCurrentIncident изменяется состояние currentIncident\r\n  useEffect(() => {\r\n    //Получаем новый выбранный инцидент\r\n    const newCurrentIncident = list.find(\r\n      (item) => item.id === chooseIncidentId,\r\n    );\r\n    dispatch(incidentChoose(newCurrentIncident));\r\n    // eslint-disable-next-line\r\n  }, [chooseIncidentId, list]); // Использовать эффект если изменились параметры chooseIncidentId, list поменяли свое состояние\r\n\r\n  const [sidebarList, setSidebarList] = useState([]);\r\n  useEffect(() => {\r\n    // eslint-disable-next-line\r\n\r\n    setSidebarList(\r\n      list.map((item) => {\r\n        const newItem = {\r\n          id: item.id,\r\n          name: `${item.category ? item.category.name : ''} ${\r\n            item.property ? item.property.name : ''\r\n          } ${item.option ? item.option.name : ''}`,\r\n          createdAt: item.createdAt,\r\n        };\r\n        return newItem;\r\n      }),\r\n    );\r\n    // eslint-disable-next-line\r\n  }, [list]);\r\n\r\n  return (\r\n    <Row className=\"mt-3\">\r\n      <Col xs={5}>\r\n        <Sidebar\r\n          title={myincident ? 'Мои инциденты' : 'Инциденты'}\r\n          list={sidebarList}\r\n          onClick={setChooseIncidentId}\r\n          activeId={chooseIncidentId}\r\n          isLoading={isLoading}\r\n          badge={!myincident}\r\n        />\r\n      </Col>\r\n      <Col>\r\n        <Container>\r\n          {incident ? (\r\n            <IncidentWindow incident={incident} myincident={myincident} />\r\n          ) : null}\r\n        </Container>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default memo(Incident);\r\n","import React, { memo } from 'react';\r\n\r\nimport Incident from '../component/Incident/Incident';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst MainPage = () => {\r\n  const { list, isLoading } = useSelector((state) => state.incidents);\r\n  return <Incident list={list} isLoading={isLoading} />;\r\n};\r\n\r\nexport default memo(MainPage);\r\n","import React, { memo, useState, useEffect } from 'react';\r\nimport styles from './styles.module.css';\r\n\r\n//Interface TypeScript for function Sidebar\r\nimport { IListEdit } from './interface';\r\n//? Bootstrap\r\nimport { Row, Col, ListGroup, Form, Button } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\n//? Font Awesome иконки\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst ListEdit: React.FC<IListEdit> = ({\r\n  title,\r\n  list,\r\n  setNumber,\r\n  activeId,\r\n  actionCreator,\r\n  route,\r\n  onClick,\r\n  departmentId,\r\n  categoryId,\r\n  inputOff,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  //! Определить локальное состояние и обработчик\r\n  // Define local state and handleState\r\n  const [state, setState] = useState({ name: '', categoryId, departmentId });\r\n  useEffect(() => {\r\n    if (categoryId) {\r\n      setState({ name: '', categoryId, departmentId });\r\n    } else if (departmentId) {\r\n      setState({ name: '', categoryId, departmentId });\r\n    }\r\n  }, [categoryId, departmentId]);\r\n\r\n  //! Определить функцию обработки события\r\n  // Define function handle submit\r\n  const onSubmit = (event: any) => {\r\n    event.preventDefault();\r\n    if (route) {\r\n      //@ts-ignore\r\n      dispatch(actionCreator(route, 'post', state));\r\n      setState({ name: '', categoryId: undefined, departmentId });\r\n    }\r\n  };\r\n  return (\r\n    <Col xs={3}>\r\n      <h2>{title}</h2>\r\n      {inputOff ? null : (\r\n        <Form onSubmit={onSubmit}>\r\n          <Form.Group>\r\n            <Form.Label></Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder='Введите название и нажмите \"Enter\"'\r\n              value={state.name}\r\n              onChange={(event: any) => {\r\n                setState({ ...state, name: event.target.value, departmentId });\r\n              }}\r\n            />\r\n          </Form.Group>\r\n        </Form>\r\n      )}\r\n\r\n      <ListGroup variant=\"flush\">\r\n        {list ? (\r\n          list.map((item) => (\r\n            <ListGroup.Item\r\n              key={item.id}\r\n              className={item.id === activeId ? `active` : undefined}\r\n            >\r\n              <Row>\r\n                <Col xs={9}>\r\n                  <div\r\n                    className={styles.item}\r\n                    onClick={() => {\r\n                      if (onClick) {\r\n                        //@ts-ignore\r\n                        onClick(item.id, setNumber || null);\r\n                      }\r\n                    }}\r\n                  >\r\n                    {item.name}\r\n                  </div>\r\n                </Col>\r\n                {inputOff ? null : (\r\n                  <Col xs={3}>\r\n                    <Button\r\n                      size=\"sm\"\r\n                      variant=\"danger\"\r\n                      onClick={() => {\r\n                        //@ts-ignore\r\n                        dispatch(actionCreator(route, 'delete', '', item.id));\r\n                      }}\r\n                    >\r\n                      <FontAwesomeIcon icon={faTrash} />\r\n                    </Button>\r\n                  </Col>\r\n                )}\r\n              </Row>\r\n            </ListGroup.Item>\r\n          ))\r\n        ) : (\r\n          <small className=\"text-muted text-center\">Данные отсутствуют</small>\r\n        )}\r\n      </ListGroup>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default memo(ListEdit);\r\n","import React, { memo, useEffect, useState } from 'react';\r\nimport { catalogPost } from '../../redux/actionCreators/catalogAction';\r\n\r\n//?Bootstrap\r\nimport ListEdit from '../ListEdit/ListEdit';\r\n\r\nconst CatalogSetting = ({ list, departmentId }) => {\r\n  const [chooseCategoryId, setChooseCategoryId] = useState();\r\n\r\n  const onClick = (id, setNumber) => {\r\n    setNumber(id);\r\n  };\r\n  const [currentCategory, setCurrentCategory] = useState({});\r\n  useEffect(() => {\r\n    setCurrentCategory(list.find((item) => item.id === chooseCategoryId));\r\n  }, [chooseCategoryId, list]);\r\n\r\n  return (\r\n    <>\r\n      <ListEdit\r\n        title=\"Категории\"\r\n        departmentId={departmentId}\r\n        list={list}\r\n        setNumber={setChooseCategoryId}\r\n        activeId={chooseCategoryId}\r\n        actionCreator={catalogPost}\r\n        route={'categories'}\r\n        onClick={onClick}\r\n      />\r\n      {currentCategory ? (\r\n        <ListEdit\r\n          title=\"Параметры\"\r\n          list={currentCategory.properties ? currentCategory.properties : null}\r\n          actionCreator={catalogPost}\r\n          route={'properties'}\r\n          categoryId={Number(chooseCategoryId)}\r\n        />\r\n      ) : null}\r\n      {currentCategory ? (\r\n        <ListEdit\r\n          title=\"Опции\"\r\n          list={currentCategory.options ? currentCategory.options : null}\r\n          route={'options'}\r\n          actionCreator={catalogPost}\r\n          categoryId={chooseCategoryId}\r\n        />\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(CatalogSetting);\r\n","import React, { memo } from 'react';\r\nimport ListEdit from '../ListEdit/ListEdit';\r\n\r\nconst DepartmentSetting = ({ department, setNumber, activeId, onClick }) => {\r\n  return (\r\n    <>\r\n      <ListEdit\r\n        list={department}\r\n        title={`Отделы`}\r\n        setNumber={setNumber}\r\n        activeId={activeId}\r\n        onClick={onClick}\r\n        route={'departments'}\r\n        inputOff\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(DepartmentSetting);\r\n","import React, { memo, useState, useEffect } from 'react';\r\nimport CatalogSetting from '../component/CatalogSetting/CatalogSetting';\r\nimport Sidebar from '../component/Sidebar/Sidebar';\r\nimport { useSelector } from 'react-redux';\r\nimport DepartmentSetting from '../component/DepartmentSetting/DepartmentSetting';\r\n\r\n/**Bootstrap components */\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\nconst SettingPage = (props) => {\r\n  const { catalog } = useSelector((state) => state);\r\n  const [departmentId, setDepartmentId] = useState();\r\n  const onClick = (id, setNumber) => {\r\n    setNumber(id);\r\n  };\r\n  const [listCatalog, setListCatalog] = useState([]);\r\n  useEffect(() => {\r\n    setListCatalog(\r\n      catalog.list.filter(\r\n        (item) => Number(item.departmentId) === Number(departmentId),\r\n      ),\r\n    );\r\n  }, [departmentId, catalog]);\r\n  const [activeId, setActiveId] = useState(0);\r\n  const list = [\r\n    { name: 'Каталог', id: 1 },\r\n    { name: 'Статус', id: 2 },\r\n    { name: 'Принять в работу', id: 3 },\r\n  ];\r\n  const [jsxContent, setJsxContent] = useState();\r\n  useEffect(() => {\r\n    switch (activeId) {\r\n      case 0:\r\n        setJsxContent('');\r\n        break;\r\n      case 1:\r\n        setJsxContent(\r\n          <Row>\r\n            <DepartmentSetting\r\n              department={catalog.department}\r\n              setNumber={setDepartmentId}\r\n              activeId={departmentId}\r\n              onClick={onClick}\r\n              inputed\r\n            />\r\n            <CatalogSetting list={listCatalog} departmentId={departmentId} />\r\n          </Row>,\r\n        );\r\n        break;\r\n      default:\r\n        setJsxContent(\r\n          <p className=\"align-content-center\">\r\n            Контент находиться в разработке\r\n          </p>,\r\n        );\r\n        break;\r\n    }\r\n  }, [activeId, listCatalog, catalog.department, departmentId]);\r\n  return (\r\n    <Row>\r\n      <Col xs={2}>\r\n        <Sidebar\r\n          list={list}\r\n          title={`Настройки`}\r\n          activeId={activeId}\r\n          onClick={setActiveId}\r\n        />\r\n      </Col>\r\n      <Col xs={10}>{jsxContent}</Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default memo(SettingPage);\r\n","import React, { memo } from 'react';\r\n\r\n/**Bootstrap components */\r\nimport { Form } from 'react-bootstrap';\r\n\r\nconst CreateIncidentModalSelect = ({ onChange, list, title = '' }) => {\r\n  return (\r\n    <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n      {!!title ? <Form.Label>{title}</Form.Label> : null}\r\n      <Form.Control as=\"select\" onChange={onChange}>\r\n        {list.length\r\n          ? list.map((item) => {\r\n              return (\r\n                <option value={item.id} key={item.id}>\r\n                  {item.name}\r\n                </option>\r\n              );\r\n            })\r\n          : null}\r\n      </Form.Control>\r\n    </Form.Group>\r\n  );\r\n};\r\n\r\nexport default memo(CreateIncidentModalSelect);\r\n","import React, { memo, useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport CreateIncidentModalSelect from '../CreateIncidentModalSelect/CreateIncidentModalSelect';\r\n\r\n/**Bootstrap components */\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport { incidentFetching } from '../../redux/actionCreators/incidentAction';\r\nimport { incidentCreate } from '../../redux/actionCreators/incidentAction';\r\n\r\nconst CreateIncidentModel = ({ handleClose, showModal }) => {\r\n  const {\r\n    auth: { user },\r\n    catalog: { list },\r\n  } = useSelector((state) => state);\r\n\r\n  const dateNow = new Date();\r\n  const [incident, setIncident] = useState({\r\n    startWork: null,\r\n    dateCreate: `${dateNow.getFullYear()}-${dateNow.getMonth()}-${dateNow.getDate()} ${dateNow.getHours()}:${dateNow.getMinutes()}:${dateNow.getSeconds()}`,\r\n    currentResponsible: null,\r\n    text: '',\r\n    level: 0,\r\n    statusId: 0,\r\n    departmentId: null,\r\n    positionId: null,\r\n    name: `${user.name1} ${user.name2} ${user.name3}`,\r\n    email: user.email,\r\n    userNumber: user.number,\r\n    phone1: user.phone1,\r\n    phone2: user.phone2,\r\n    categoryId: list[0] ? list[0].id : null,\r\n    propertyId: list[0].properties[0] ? list[0].properties[0].id : null,\r\n    optionId: list[0].options[0] ? list[0].options[0].id : null,\r\n  });\r\n\r\n  //? Инициализируем состояние номера текущей категории\r\n  const [currentIdCategory, setCurrentIdCategory] = useState(\r\n    incident.categoryId,\r\n  );\r\n  //? Инициализируем состояние номера текущего параметра\r\n  const [currentIdProperty, setCurrentIdProperty] = useState(\r\n    incident.propertyId,\r\n  );\r\n  //? Инициализируем состояние номера текущей опции\r\n  const [currentIdOption, setCurrentIdOption] = useState(incident.optionId);\r\n\r\n  //? Инициализируем состояние текущей категории\r\n  const [currentCategory, setCurrentCategory] = useState(\r\n    list.filter((item) => item.id === currentIdCategory),\r\n  );\r\n\r\n  //? Устанавливаем эффект на каждое изменение состояния номера текущей категории\r\n  useEffect(() => {\r\n    let categoryId = currentIdCategory;\r\n    let propertyId = currentIdProperty;\r\n    let optionId = currentIdOption;\r\n\r\n    // console.log('categoryId', categoryId);\r\n    // console.log('propertyId', propertyId);\r\n    // console.log('optionId', optionId);\r\n\r\n    const newCurrentCategory = list.filter(\r\n      (item) => item.id === currentIdCategory,\r\n    );\r\n\r\n    if (categoryId !== incident.categoryId) {\r\n      if (!!newCurrentCategory[0].properties[0]) {\r\n        propertyId = newCurrentCategory[0].properties[0].id;\r\n      } else propertyId = null;\r\n      if (!!newCurrentCategory[0].options[0]) {\r\n        optionId = newCurrentCategory[0].options[0].id;\r\n      } else optionId = null;\r\n    }\r\n\r\n    setCurrentCategory(newCurrentCategory);\r\n    setIncident({ ...incident, categoryId, propertyId, optionId });\r\n    // eslint-disable-next-line\r\n  }, [currentIdCategory, currentIdProperty, currentIdOption]);\r\n\r\n  //Функция собирающая из списка и функции изменения состояния номера элемент html\r\n  const listSelect = (list, setCurrent, title) => {\r\n    if (list.length)\r\n      return (\r\n        <CreateIncidentModalSelect\r\n          list={list}\r\n          onChange={(event) => setCurrent(Number(event.target.value))}\r\n          title={title}\r\n        />\r\n      );\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    dispatch(incidentCreate());\r\n    dispatch(incidentFetching('post', incident));\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      show={showModal}\r\n      onHide={handleClose}\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Создание инцидента</Modal.Title>\r\n      </Modal.Header>\r\n\r\n      <Form onSubmit={onSubmit}>\r\n        <Modal.Body>\r\n          <Form.Group controlId=\"formBasicEmail\">\r\n            <Form.Control type=\"text\" disabled value={`${incident.name}`} />\r\n            <Form.Text className=\"text-muted\">\r\n              Если имя в этом поле не совпадает с Вашим, обратитесь к\r\n              администратору.\r\n            </Form.Text>\r\n          </Form.Group>\r\n\r\n          {listSelect(list, setCurrentIdCategory, 'Выберите категорию')}\r\n          {listSelect(currentCategory[0].properties, setCurrentIdProperty)}\r\n          {listSelect(currentCategory[0].options, setCurrentIdOption)}\r\n\r\n          <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n            <Form.Label>Содержание обращения</Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows=\"3\"\r\n              value={incident.text}\r\n              placeholder=\"Опишите подробно ситуацию\"\r\n              onChange={(event) => {\r\n                setIncident({ ...incident, text: event.target.value });\r\n              }}\r\n            />\r\n          </Form.Group>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Закрыть\r\n          </Button>\r\n          <Button variant=\"primary\" type=\"submit\">\r\n            Отправить\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default memo(CreateIncidentModel);\r\n","import React, { memo, useEffect, useState } from 'react';\r\nimport CreateIncidentModal from '../CreateIncidentModal/CreateIncidentModal';\r\nimport { NavLink } from 'react-router-dom';\r\nimport styles from './styles.module.css';\r\n\r\n/**Bootstrap component */\r\nimport { Navbar, Nav, Image, Button } from 'react-bootstrap';\r\nimport { useSelector } from 'react-redux';\r\n//? Font Awesome иконки\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCog } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Header = (props) => {\r\n  const { user } = useSelector((state) => state.auth);\r\n  const [access, setAccess] = useState(1);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const handleClose = () => setShowModal(false);\r\n  const handleOpen = () => setShowModal(true);\r\n\r\n  /**Получаем полное имя при изменение сущности users в store */\r\n  const [fullName, setFullName] = useState('');\r\n  useEffect(() => {\r\n    if (!!user) {\r\n      setFullName(`${user.name1 || 'N'} ${user.name2 || 'N'}`);\r\n      setAccess(1);\r\n    } else {\r\n      setFullName(`Гость`);\r\n    }\r\n  }, [user]);\r\n\r\n  return (\r\n    <nav className=\"mb-1\">\r\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"light\" variant=\"light\">\r\n        <Navbar.Brand>Service Desk</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className={`${styles.nav} mr-auto`}>\r\n            <Nav.Item>\r\n              <NavLink\r\n                to=\"/\"\r\n                activeClassName={`btn-light ${styles.nav__button}`}\r\n                className=\"btn btn-link align-middle\"\r\n              >\r\n                Рабочая панель\r\n              </NavLink>\r\n              <NavLink\r\n                to=\"/myincidents\"\r\n                activeClassName={`btn-light ${styles.nav__button}`}\r\n                className=\"btn btn-link align-middle\"\r\n              >\r\n                Мои инциденты\r\n              </NavLink>\r\n            </Nav.Item>{' '}\r\n            <Nav.Item>\r\n              <Button onClick={handleOpen}>Создать инцидент</Button>\r\n              {!!showModal ? (\r\n                <CreateIncidentModal\r\n                  handleClose={handleClose}\r\n                  showModal={showModal}\r\n                />\r\n              ) : null}\r\n            </Nav.Item>\r\n          </Nav>\r\n          <Nav>\r\n            <Nav.Item>\r\n              <Nav.Link href=\"\">\r\n                <Navbar.Text className=\"pr-1\">{`${fullName}`}</Navbar.Text>\r\n                <Image src=\"https://via.placeholder.com/35\" roundedCircle />\r\n              </Nav.Link>\r\n            </Nav.Item>\r\n            {access === 1 ? (\r\n              <Nav.Item className={styles.nav__item}>\r\n                <NavLink\r\n                  to=\"/setting\"\r\n                  activeClassName={'btn-light'}\r\n                  className=\"btn btn-link align-middle\"\r\n                >\r\n                  <FontAwesomeIcon icon={faCog} />\r\n                </NavLink>\r\n              </Nav.Item>\r\n            ) : null}\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default memo(Header);\r\n","import React, { memo } from 'react';\r\nimport Incident from '../component/Incident/Incident';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst MyIncidentPage = (props) => {\r\n  const {\r\n    incidents: { myList },\r\n  } = useSelector((state) => state);\r\n\r\n  return <Incident list={myList} myincident={true} />;\r\n};\r\n\r\nexport default memo(MyIncidentPage);\r\n","import React, { memo, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { categoryFetching } from './redux/actionCreators/catalogAction';\r\nimport { authFetching } from './redux/actionCreators/authAction';\r\nimport {\r\n  incidentRequestSuccessed,\r\n  myIncidentRequestSuccessed,\r\n} from './redux/actionCreators/incidentAction';\r\nimport { queryApi } from './redux/actionCreators/queryApiAction';\r\nimport { departmentRequestSuccessed } from './redux/actionCreators/departmentAction';\r\n\r\nimport MainPage from './page/MainPage';\r\nimport SettingPage from './page/SettingPage';\r\nimport Header from './component/Header/Header';\r\nimport MyIncidentPage from './page/MyIncidentPage';\r\n\r\nconst App = (props) => {\r\n  const {\r\n    auth: { user },\r\n    incidents: { isUpdate },\r\n  } = useSelector((state) => state);\r\n  const dispatch = useDispatch();\r\n\r\n  const { incidents } = useSelector((state) => state);\r\n  console.log(incidents);\r\n  useEffect(() => {\r\n    dispatch(authFetching(window.ipGlobal));\r\n    dispatch(categoryFetching());\r\n    dispatch(queryApi('departments', departmentRequestSuccessed));\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  useEffect(() => {\r\n    if (!!user && isUpdate) {\r\n      dispatch(\r\n        queryApi(\r\n          'incidents/my',\r\n          myIncidentRequestSuccessed,\r\n          'get',\r\n          {},\r\n          user.number,\r\n        ),\r\n      );\r\n      dispatch(\r\n        queryApi(\r\n          'incidents/responsible',\r\n          incidentRequestSuccessed,\r\n          'get',\r\n          {},\r\n          user.departmentId,\r\n        ),\r\n      );\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [user, isUpdate]);\r\n  return (\r\n    <BrowserRouter>\r\n      <Header />\r\n      <Switch>\r\n        <Route exact path=\"/\" component={MainPage} />\r\n        <Route path=\"/setting\" component={SettingPage} />\r\n        <Route path=\"/myincidents\" component={MyIncidentPage} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default memo(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport store from './redux/store';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"styles_nav__20rXn\",\"nav__item\":\"styles_nav__item__14i8u\",\"nav__button\":\"styles_nav__button__O9Duu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"styles_block__2nE8u\",\"item\":\"styles_item__2r7MS\",\"active\":\"styles_active__1gNvi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"styles_header__11U4o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"styles_item__2-gmj\"};"],"sourceRoot":""}